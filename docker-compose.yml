version: '3.7'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: "echo stat | nc localhost $ZOOKEEPER_CLIENT_PORT"
      start_period: 20s

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      - kafka-broker-1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT_INTERNAL://localhost:19092
      SCHEMA_REGISTRY_DEBUG: 'true'

  kafka-broker-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker-1
    hostname: kafka-broker-1
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT_INTERNAL://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "19092" ]
      start_period: 20s
  kafdrop: #http://localhost:9000 gui console
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka-broker-1:9092"
    healthcheck:
      test: "curl -f kafdrop:9000/actuator/health || exit 1"
      start_period: 30s

  #create Kafka Topics
  create-kafka-topics:
    image: confluentinc/cp-kafka:latest
    container_name: create-kafka-topics
    depends_on:
      - kafka-broker-1
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka-broker-1:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic my-topic-1 --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic my-topic-2 --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-broker-1:9092 --list
      "

  postgres-db:
    image: 'postgres:15.2-alpine'
    container_name: postgres-db
    ports:
      - 5432:5432
# mount /var/lib/postgresql/data from inside its container to local directory (./pgdata) and persist
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=compose-postgres-usr
      - POSTGRES_PASSWORD=compose-postgres-pwd
      - POSTGRES_DB=compose-postgres
# may configure pgadmin

#  spring-app:
#    build: .
#    container_name: spring-kafka-example
#    ports:
#      - "8080:8080"
#    depends_on:
#      - postgres-db
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/compose-postgres
#      SPRING_DATASOURCE_USERNAME: compose-postgres-usr
#      SPRING_DATASOURCE_PASSWORD: compose-postgres-pwd
